// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository.go -destination=./internal/mock_repository.go -package=internal
//

// Package internal is a generated GoMock package.
package internal

import (
	model "location-api/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateLocation mocks base method.
func (m *MockStore) CreateLocation(req *model.CreateLocationRequest) (*model.CreateLocationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLocation", req)
	ret0, _ := ret[0].(*model.CreateLocationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLocation indicates an expected call of CreateLocation.
func (mr *MockStoreMockRecorder) CreateLocation(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLocation", reflect.TypeOf((*MockStore)(nil).CreateLocation), req)
}

// GetLocation mocks base method.
func (m *MockStore) GetLocation(req *model.GetLocationRequest) (*model.GetLocationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocation", req)
	ret0, _ := ret[0].(*model.GetLocationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocation indicates an expected call of GetLocation.
func (mr *MockStoreMockRecorder) GetLocation(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocation", reflect.TypeOf((*MockStore)(nil).GetLocation), req)
}

// GetLocations mocks base method.
func (m *MockStore) GetLocations(req *model.GetLocationsRequest) (*model.GetLocationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocations", req)
	ret0, _ := ret[0].(*model.GetLocationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocations indicates an expected call of GetLocations.
func (mr *MockStoreMockRecorder) GetLocations(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocations", reflect.TypeOf((*MockStore)(nil).GetLocations), req)
}

// UpdateLocations mocks base method.
func (m *MockStore) UpdateLocations(req *model.UpdateLocationsRequest) (*model.UpdateLocationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLocations", req)
	ret0, _ := ret[0].(*model.UpdateLocationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLocations indicates an expected call of UpdateLocations.
func (mr *MockStoreMockRecorder) UpdateLocations(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLocations", reflect.TypeOf((*MockStore)(nil).UpdateLocations), req)
}
