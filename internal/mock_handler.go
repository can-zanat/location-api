// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/handler.go
//
// Generated by this command:
//
//	mockgen -source=./internal/handler.go -destination=./internal/mock_handler.go -package=internal
//

// Package internal is a generated GoMock package.
package internal

import (
	model "location-api/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Mockactions is a mock of actions interface.
type Mockactions struct {
	ctrl     *gomock.Controller
	recorder *MockactionsMockRecorder
}

// MockactionsMockRecorder is the mock recorder for Mockactions.
type MockactionsMockRecorder struct {
	mock *Mockactions
}

// NewMockactions creates a new mock instance.
func NewMockactions(ctrl *gomock.Controller) *Mockactions {
	mock := &Mockactions{ctrl: ctrl}
	mock.recorder = &MockactionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockactions) EXPECT() *MockactionsMockRecorder {
	return m.recorder
}

// CreateLocation mocks base method.
func (m *Mockactions) CreateLocation(req *model.CreateLocationRequest) (*model.CreateLocationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLocation", req)
	ret0, _ := ret[0].(*model.CreateLocationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLocation indicates an expected call of CreateLocation.
func (mr *MockactionsMockRecorder) CreateLocation(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLocation", reflect.TypeOf((*Mockactions)(nil).CreateLocation), req)
}

// GetLocation mocks base method.
func (m *Mockactions) GetLocation(req *model.GetLocationRequest) (*model.GetLocationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocation", req)
	ret0, _ := ret[0].(*model.GetLocationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocation indicates an expected call of GetLocation.
func (mr *MockactionsMockRecorder) GetLocation(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocation", reflect.TypeOf((*Mockactions)(nil).GetLocation), req)
}

// GetLocations mocks base method.
func (m *Mockactions) GetLocations(req *model.GetLocationsRequest) (*model.GetLocationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocations", req)
	ret0, _ := ret[0].(*model.GetLocationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocations indicates an expected call of GetLocations.
func (mr *MockactionsMockRecorder) GetLocations(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocations", reflect.TypeOf((*Mockactions)(nil).GetLocations), req)
}

// GetRoutes mocks base method.
func (m *Mockactions) GetRoutes(req *model.GetRoutesRequest) (*model.GetRoutesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoutes", req)
	ret0, _ := ret[0].(*model.GetRoutesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoutes indicates an expected call of GetRoutes.
func (mr *MockactionsMockRecorder) GetRoutes(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoutes", reflect.TypeOf((*Mockactions)(nil).GetRoutes), req)
}

// UpdateLocations mocks base method.
func (m *Mockactions) UpdateLocations(req *model.UpdateLocationsRequest) (*model.UpdateLocationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLocations", req)
	ret0, _ := ret[0].(*model.UpdateLocationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLocations indicates an expected call of UpdateLocations.
func (mr *MockactionsMockRecorder) UpdateLocations(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLocations", reflect.TypeOf((*Mockactions)(nil).UpdateLocations), req)
}
